import time
from datetime import datetime
from math import ceil

from cachetools import cached

from config import FRACTIONS, LEADERS_TIME_LEFT, SUPPORT_ROLES, ROLES, STRUCTURES, LEADERS_ROLES
from db import Users, Settings_s, SpecialAccesses


@cached(cache={})
def pointWords(value: int, words: tuple | list) -> str:
    """
    :param value: int
    :param words: e.g. ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')
    :return:
    """
    if value % 10 == 1 and value % 100 != 11:
        return words[0]
    elif 2 <= value % 10 <= 4 and (value % 100 < 10 or value % 100 >= 20):
        return words[1]
    else:
        return words[2]


@cached(cache={})
def formatts(timestamp: int | float) -> str:
    return datetime.fromtimestamp(timestamp).strftime("%d.%m.%Y")


@cached(cache={})
def formatedtotts(formatted: str) -> float:
    return datetime.strptime(formatted, "%d.%m.%Y").timestamp()


def getuserstats(user):
    if user.fraction:
        uid = [i.nickname for i in
               sorted(Users.select().where(Users.role.is_null(True)), key=lambda x: FRACTIONS.index(x.fraction))]
        text = f'''
üåê <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -</b> <a href="tg://user?id={user.telegram_id}">{user.nickname}</a> <code>(#{
        uid.index(user.nickname) + 1})</code>

üßë <b>–í–∞—à–µ –∏–º—è:</b> <code>{user.name}</code>
‚ò∏Ô∏è <b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b> <code>{user.age} –ª–µ—Ç</code>
‚öõÔ∏è <b>–ì–æ—Ä–æ–¥:</b> <code>{user.city}</code>

üìß <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>–õ–∏–¥–µ—Ä</code>
üé≤ <b>–§—Ä–∞–∫—Ü–∏—è:</b> <code>{user.fraction}</code>
üïí <b>–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–æ—Å—Ç:</b> <code>{formatts(user.appointed)} ({ceil((time.time() - user.appointed) / 86400)} {
    pointWords(ceil((time.time() - user.appointed) / 86400), ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))})</code>
‚åõ <b>–î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{LEADERS_TIME_LEFT - ceil((time.time() - user.appointed) / 86400)} {
    pointWords(LEADERS_TIME_LEFT - ceil((time.time() - user.appointed) / 86400), ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}</code>
üíé <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:</b> <code>{user.apa} {pointWords(user.apa, ('–±–∞–ª–ª', '–±–∞–ª–ª–∞', '–±–∞–ª–ª–æ–≤'))}</code>\n'''

        if user.inactiveend and user.inactiveend > time.time():
            text += (f'\nüåë <b>–î–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–µ–∞–∫—Ç–∏–≤:</b> <code>—Å '
                     f'{formatts(user.inactivestart)} –ø–æ {formatts(user.inactiveend)}\n</code>')

        text += f'''\n
üîó <b>Discord:</b> <code>{user.discord_id}</code>
üîó <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:</b> <a href="{user.vk}">–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
üîó <b>–§–æ—Ä—É–º:</b> <a href="{user.forum}">–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
üîó <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n\n'''
        if user.rebuke:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤:</b> {user.rebuke}\n'
        if user.warn:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {user.warn}\n'
        if user.verbal:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–Ω–∏–∫–æ–≤:</b> {user.verbal}'
    elif user.role in SUPPORT_ROLES:
        uid = [i.nickname for i in
               sorted(Users.select().where(Users.role << SUPPORT_ROLES), key=lambda x: SUPPORT_ROLES.index(x.role))]
        transferd = Settings_s.get(Settings_s.setting == "transferamnt_d").val - ceil(
            (time.time() - user.appointed) / 86400)
        text = f'''
üåê <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -</b> <a href="tg://user?id={user.telegram_id}">{user.nickname}</a> <code>(#{
        uid.index(user.nickname) + 1})</code>

üßë <b>–í–∞—à–µ –∏–º—è:</b> <code>{user.name}</code>
‚ò∏Ô∏è <b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b> <code>{user.age} –ª–µ—Ç</code>
‚öõÔ∏è <b>–ì–æ—Ä–æ–¥:</b> <code>{user.city}</code>

üìß <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>{user.role}</code>
üïí <b>–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–æ—Å—Ç:</b> <code>{formatts(user.appointed)} ({ceil((time.time() - user.appointed) / 86400)} {
        pointWords(ceil((time.time() - user.appointed) / 86400), ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))})</code>
‚åõ <b>–î–Ω–µ–π –¥–æ –ø–µ—Ä–µ–≤–æ–¥–∞:</b> <code>{max(transferd, 0)} {
        pointWords(transferd, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')) if transferd > 0 else '–¥–Ω–µ–π'}</code>
üíé <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Å–∫–æ–≤:</b> <code>{user.apa} {pointWords(user.apa, ('–∞—Å–∫', '–∞—Å–∫–∞', '–∞—Å–∫–æ–≤'))}</code>\n'''

        if user.inactiveend and user.inactiveend > time.time():
            text += (f'\nüåë <b>–î–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–µ–∞–∫—Ç–∏–≤:</b> '
                     f'<code>—Å {formatts(user.inactivestart)} –ø–æ {formatts(user.inactiveend)}</code>\n')

        text += f'''\n
üîó <b>Discord:</b> <code>{user.discord_id}</code>
üîó <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:</b> <a href="{user.vk}">–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
üîó <b>–§–æ—Ä—É–º:</b> <a href="{user.forum}">–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
üîó <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n\n'''
        if user.rebuke:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤:</b> {user.rebuke}\n'
        if user.warn:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {user.warn}\n'
        if user.verbal:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–Ω–∏–∫–æ–≤:</b> {user.verbal}'
    else:
        uid = [i.nickname for i in sorted(Users.select().where(Users.role << ROLES), key=lambda x: ROLES.index(x.role))]
        lp = (f"{formatts(user.promoted)} ({ceil((time.time() - user.promoted) / 86400)} "
              f"{pointWords(ceil((time.time() - user.promoted) / 86400), ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))})"
              ) if user.promoted else "–Ω–µ –±—ã–ª–æ"
        text = (f'''
üåê <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -</b> <a href="tg://user?id={user.telegram_id}">{user.nickname}</a> <code>(#{
        uid.index(user.nickname) + 1})</code>

üßë <b>–í–∞—à–µ –∏–º—è:</b> <code>{user.name}</code>
‚ò∏Ô∏è <b>–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:</b> <code>{user.age} –ª–µ—Ç</code>
‚öõÔ∏è <b>–ì–æ—Ä–æ–¥:</b> <code>{user.city}</code>

üìß <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>{user.role}</code>''' +
                (f"\nüé≤ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: <code>{STRUCTURES[user.role]}</code>" if user.role in STRUCTURES else "") + f'''
üïí <b>–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–æ—Å—Ç:</b> <code>{formatts(user.appointed)} ({ceil((time.time() - user.appointed) / 86400)} {
        pointWords(ceil((time.time() - user.appointed) / 86400), ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))})</code>
üïí <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ:</b> <code>{lp}</code>
‚ùáÔ∏è <b>–î–Ω–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –Ω–æ—Ä–º—ã:</b> <code>{user.objective_completed} {
                pointWords(user.objective_completed, ('–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'))}</code>
üíé <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤:</b> <code>{user.apa} {pointWords(user.apa, ('–æ—Ç–≤–µ—Ç', '–æ—Ç–≤–µ—Ç–∞', '–æ—Ç–≤–µ—Ç–æ–≤'))}</code>\n''')

        if user.inactiveend and user.inactiveend > time.time():
            text += (f'\nüåë <b>–î–µ–π—Å—Ç–≤—É—é—â–∏–π –Ω–µ–∞–∫—Ç–∏–≤:</b> <code>—Å {formatts(user.inactivestart)} –ø–æ '
                     f'{formatts(user.inactiveend)}</code>\n')

        text += f'''\n
üîó <b>Discord:</b> <code>{user.discord_id}</code>
üîó <b>–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:</b> <a href="{user.vk}">–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
üîó <b>–§–æ—Ä—É–º:</b> <a href="{user.forum}">–ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ</a>
üîó <b>Telegram ID:</b> <code>{user.telegram_id}</code>\n\n'''
        if user.rebuke:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤:</b> {user.rebuke}\n'
        if user.warn:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> {user.warn}\n'
        if user.verbal:
            text += f'‚õî <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–Ω–∏–∫–æ–≤:</b> {user.verbal}'
    return text


def checkrole(admin: Users, target: Users):
    if admin.role in ('–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–û—Å–Ω–æ–≤–Ω–æ–π –ó–ì–ê', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–ê', '–ö—É—Ä–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏'):
        return True
    if target.role in SUPPORT_ROLES and (
            admin.role in ('–ì–ª–∞–≤–Ω—ã–π –ê–ü', '–ì–ª–∞–≤–Ω—ã–π —Å–ª–µ–¥—è—â–∏–π –ê–ü', '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ì–° –ê–ü') or
            SpecialAccesses.get_or_none(SpecialAccesses.telegram_id == admin.telegram_id,
                                        SpecialAccesses.role == 'swatcher')):
        return True
    if target.fraction and admin.role in LEADERS_ROLES:
        return True
    return False
